// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model VibeUserTable {
  id          Int           @id @default(autoincrement())
  username    String        @unique
  email       String        @unique
  userImage   Bytes?
  password    String
  isAdmin     Boolean       @default(false)
  story       Bytes?

  friends     FriendList[]  @relation("UserToFriends")
  friendedBy  FriendList[]  @relation("FriendToUser")
  posts       Post[]        @relation("UserPosts")
}

model FriendList {
  id        Int           @id @default(autoincrement())
  userId    Int
  friendId  Int
  status    String        @default("pending")

  user      VibeUserTable @relation("UserToFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend    VibeUserTable @relation("FriendToUser", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model Post {
  postid          Int           @id @default(autoincrement())
  postTitle       String
  postDescription String
  postImage       Bytes
  createdAt       DateTime      @default(now())
  postLikes       Int           @default(0)

  authorId        Int
  author          VibeUserTable @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
}